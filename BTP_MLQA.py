# -*- coding: utf-8 -*-
"""BTP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u96-PH2P8twftHu2YBY-DbUby7UgRCZK
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install datasets transformers

from huggingface_hub import notebook_login

notebook_login()

!pip install datasets -U --force-reinstall



from datasets import load_dataset, load_metric

langs = ["ar", "de", "vi", "zh", "en", "es", "hi"]
translate_langs = ["ar", "de", "vi", "zh", "es", "hi"]
langs_test = []
langs_translate_test = []
langs_translate_train = ["ar.ar", "de.de", "vi.vi", "zh.zh", "en.en", "es.es", "hi.hi"]
langs_translate_train_all = []

mlqa = {}

for lang1 in langs:
    for lang2 in langs:
        mlqa[f"{lang1}.{lang2}"] = load_dataset("mlqa", f"mlqa.{lang1}.{lang2}")
        langs_test.append(f"{lang1}.{lang2}")

for lang in translate_langs:
    mlqa[f"translate-train.{lang}"] = load_dataset("mlqa", f"mlqa-translate-train.{lang}")
    mlqa[f"translate-test.{lang}"] = load_dataset("mlqa", f"mlqa-translate-test.{lang}")
    langs_translate_test.append(f"translate-test.{lang}")
    langs_translate_train_all.append(f"translate-train.{lang}")

from datasets import load_dataset, Dataset

langs = ["ar", "de", "vi", "zh", "en", "es", "hi"]
translate_langs = ["ar", "de", "vi", "zh", "es", "hi"]
langs_test = []
langs_translate_test = []
langs_translate_train = ["ar.ar", "de.de", "vi.vi", "zh.zh", "en.en", "es.es", "hi.hi"]
langs_translate_train_all = []

mlqa = {}

# Define the desired number of samples for test and validation
test_samples = 15
validation_samples = 5

for lang1 in langs:
    for lang2 in langs:
        mlqa_key = f"{lang1}.{lang2}"
        mlqa[mlqa_key] = load_dataset("mlqa", f"mlqa.{lang1}.{lang2}")
        # Take the desired number of samples for test
        mlqa[mlqa_key]['test'] = mlqa[mlqa_key]['test'].shuffle(seed=42).select(range(test_samples))
        mlqa[mlqa_key]['validation'] = mlqa[mlqa_key]['validation'].shuffle(seed=42).select(range(validation_samples))

        langs_test.append(mlqa_key)

for lang in translate_langs:
    translate_train_key = f"translate-train.{lang}"
    translate_test_key = f"translate-test.{lang}"
    mlqa[translate_train_key] = load_dataset("mlqa", f"mlqa-translate-train.{lang}")
    mlqa[translate_test_key] = load_dataset("mlqa", f"mlqa-translate-test.{lang}")

    # Take the desired number of samples for validation
    mlqa[translate_train_key]['train'] = mlqa[translate_train_key]['train'].shuffle(seed=42).select(range(test_samples))
    mlqa[translate_train_key]['validation'] = mlqa[translate_train_key]['validation'].shuffle(seed=42).select(range(validation_samples))

    mlqa[translate_test_key]['test'] = mlqa[translate_test_key]['test'].shuffle(seed=42).select(range(test_samples))

    langs_translate_test.append(translate_test_key)
    langs_translate_train_all.append(translate_train_key)

# Create a new dictionary with the subsets
mlqa = {key: mlqa[key] for key in langs_test + langs_translate_test + langs_translate_train_all}

# Print the keys and the number of samples for each dataset
for key, dataset in mlqa.items():
    print(f"{key}: {len(dataset)} samples")

# Access a specific dataset from mlqa_subset, e.g., mlqa_subset["ar.de"]

mlqa

mlqa

mlqa["en.ar"]["test"][0]

mlqa["en.en"]["validation"][0]

mlqa["translate-train.es"]["train"][0]

mlqa["translate-train.es"]["validation"][0]

mlqa["translate-test.es"]["test"][0]

from datasets import load_dataset, load_metric, concatenate_datasets

# Load the SQuAD dataset
squad1 = load_dataset("squad")

from datasets import DatasetDict

num_train_samples = 1000
num_validation_samples = 70
squad_train_subset = squad1["train"].shuffle(seed=42).select(range(num_train_samples))

# Take a subset of the validation split
squad_validation_subset = squad1["validation"].shuffle(seed=48).select(range(num_validation_samples))
# train_df = pd.DataFrame(squad_train_subset)
# validation_df = pd.DataFrame(squad_validation_subset)

# Update the DatasetDict with the DataFrames
squad = DatasetDict({
    "train": squad_train_subset,
    "validation": squad_validation_subset
})

squad

squad1

squad["train"][0]

squad["validation"][0]

"""Load the mBERT tokenizer to process the question and context fields."""

from transformers import AutoTokenizer

model_name = "bert-base-multilingual-cased"

tokenizer = AutoTokenizer.from_pretrained(model_name)

max_length = 384 # The maximum length of a feature (question and context)
doc_stride = 128 # The authorized overlap between two part of the context when splitting it is needed.

def prepare_train_features(examples):
    # Some of the questions have lots of whitespace on the left, which is not useful and will make the
    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that
    # left whitespace
    examples["question"] = [q.lstrip() for q in examples["question"]]

    # Tokenize our examples with truncation and padding, but keep the overflows using a stride. This results
    # in one example possible giving several features when a context is long, each of those features having a
    # context that overlaps a bit the context of the previous feature.
    tokenized_examples = tokenizer(
        examples["question"],
        examples["context"],
        truncation="only_second",
        max_length=max_length,
        stride=doc_stride,
        return_overflowing_tokens=True,
        return_offsets_mapping=True,
        padding="max_length",
    )

    # Since one example might give us several features if it has a long context, we need a map from a feature to
    # its corresponding example. This key gives us just that.
    sample_mapping = tokenized_examples.pop("overflow_to_sample_mapping")
    # The offset mappings will give us a map from token to character position in the original context. This will
    # help us compute the start_positions and end_positions.
    offset_mapping = tokenized_examples.pop("offset_mapping")

    # Let's label those examples!
    tokenized_examples["start_positions"] = []
    tokenized_examples["end_positions"] = []

    for i, offsets in enumerate(offset_mapping):
        # We will label impossible answers with the index of the CLS token.
        input_ids = tokenized_examples["input_ids"][i]
        cls_index = input_ids.index(tokenizer.cls_token_id)

        # Grab the sequence corresponding to that example (to know what is the context and what is the question).
        sequence_ids = tokenized_examples.sequence_ids(i)

        # One example can give several spans, this is the index of the example containing this span of text.
        sample_index = sample_mapping[i]
        answers = examples["answers"][sample_index]
        # If no answers are given, set the cls_index as answer.
        if len(answers["answer_start"]) == 0:
            tokenized_examples["start_positions"].append(cls_index)
            tokenized_examples["end_positions"].append(cls_index)
        else:
            # Start/end character index of the answer in the text.
            start_char = answers["answer_start"][0]
            end_char = start_char + len(answers["text"][0])

            # Start token index of the current span in the text.
            token_start_index = 0
            while sequence_ids[token_start_index] != 1:
                token_start_index += 1

            # End token index of the current span in the text.
            token_end_index = len(input_ids) - 1
            while sequence_ids[token_end_index] != 1:
                token_end_index -= 1

            # Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).
            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):
                tokenized_examples["start_positions"].append(cls_index)
                tokenized_examples["end_positions"].append(cls_index)
            else:
                # Otherwise move the token_start_index and token_end_index to the two ends of the answer.
                # Note: we could go after the last offset if the answer is the last word (edge case).
                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:
                    token_start_index += 1
                tokenized_examples["start_positions"].append(token_start_index - 1)
                while offsets[token_end_index][1] >= end_char:
                    token_end_index -= 1
                tokenized_examples["end_positions"].append(token_end_index + 1)

    return tokenized_examples

squad_train = squad.map(prepare_train_features, batched=True,
                            remove_columns=squad["train"].column_names)

def prepare_validation_features(examples):
    # Some of the questions have lots of whitespace on the left, which is not useful and will make the
    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that
    # left whitespace
    examples["question"] = [q.lstrip() for q in examples["question"]]

    # Tokenize our examples with truncation and maybe padding, but keep the overflows using a stride. This results
    # in one example possible giving several features when a context is long, each of those features having a
    # context that overlaps a bit the context of the previous feature.
    tokenized_examples = tokenizer(
        examples["question"],
        examples["context"],
        truncation="only_second",
        max_length=max_length,
        stride=doc_stride,
        return_overflowing_tokens=True,
        return_offsets_mapping=True,
        padding="max_length",
    )

    # Since one example might give us several features if it has a long context, we need a map from a feature to
    # its corresponding example. This key gives us just that.
    sample_mapping = tokenized_examples.pop("overflow_to_sample_mapping")

    # We keep the example_id that gave us this feature and we will store the offset mappings.
    tokenized_examples["example_id"] = []

    for i in range(len(tokenized_examples["input_ids"])):
        # Grab the sequence corresponding to that example (to know what is the context and what is the question).
        sequence_ids = tokenized_examples.sequence_ids(i)
        context_index = 1

        # One example can give several spans, this is the index of the example containing this span of text.
        sample_index = sample_mapping[i]
        tokenized_examples["example_id"].append(examples["id"][sample_index])

        # Set to None the offset_mapping that are not part of the context so it's easy to determine if a token
        # position is part of the context or not.
        tokenized_examples["offset_mapping"][i] = [
            (o if sequence_ids[k] == context_index else None)
            for k, o in enumerate(tokenized_examples["offset_mapping"][i])
        ]

    return tokenized_examples

squad_eval = squad["validation"].map(prepare_validation_features, batched=True,
                                          remove_columns=squad["validation"].column_names)

from transformers import AutoModelForQuestionAnswering, TrainingArguments, Trainer

model_name = "bert-base-multilingual-cased"
model = AutoModelForQuestionAnswering.from_pretrained(model_name)

from transformers import DefaultDataCollator

data_collator = DefaultDataCollator()

from transformers import TrainingArguments

!pip install transformers[torch,accelerate]

pip list

!pip install accelerate -U --force-reinstall

from transformers import TrainingArguments

batch_size = 16 #no of training example processed in each iteration
args = TrainingArguments(
    "bert-base-multilingual-cased-squad",
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=batch_size,
    per_device_eval_batch_size=batch_size,
    num_train_epochs=3,
    weight_decay=1,
    # push_to_hub=True,
)

from transformers import Trainer

trainer = Trainer(
    model,
    args,
    train_dataset=squad_train["train"],
    eval_dataset=squad_train["validation"],
    data_collator=data_collator,
    tokenizer=tokenizer,
)

trainer.train()

from transformers import AutoModelForQuestionAnswering, TrainingArguments, Trainer

model_name = "salti/bert-base-multilingual-cased-finetuned-squad"
model = AutoModelForQuestionAnswering.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)
data_collator = DefaultDataCollator()

batch_size = 16
training_args = TrainingArguments(
    output_dir="bert-base-multilingual-cased-finetuned-squad",
    evaluation_strategy="epoch",
    learning_rate=2e-2,
    per_device_train_batch_size=batch_size,
    per_device_eval_batch_size=batch_size,
    num_train_epochs=1,
    weight_decay=1,
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=None,
    eval_dataset=None,
    tokenizer=tokenizer,
    data_collator=data_collator,
)

raw_predictions = trainer.predict(squad_eval)

squad_eval.set_format(type=squad_eval.format["type"],
                      columns=list(squad_eval.features.keys()))
#this line ensures that the squad_eval dataset retains its original format type and column structure.

from tqdm.auto import tqdm # for displaying progress bar
import collections
import numpy as np

def postprocess_qa_predictions(examples, features, raw_predictions, n_best_size = 20, max_answer_length = 30):
    all_start_logits, all_end_logits = raw_predictions
    # Build a map example to its corresponding features.
    example_id_to_index = {k: i for i, k in enumerate(examples["id"])}
    features_per_example = collections.defaultdict(list)
    for i, feature in enumerate(features):
        features_per_example[example_id_to_index[feature["example_id"]]].append(i)

    # The dictionaries we have to fill.
    predictions = collections.OrderedDict() # use defaultdict to store features for each example

    # Logging.
    print(f"Post-processing {len(examples)} example predictions split into {len(features)} features.")

    # Let's loop over all the examples!
    for example_index, example in enumerate(tqdm(examples)):
        # Those are the indices of the features associated to the current example.
        feature_indices = features_per_example[example_index]

        valid_answers = []

        context = example["context"]
        # Looping through all the features associated to the current example.
        for feature_index in feature_indices:
            # We grab the predictions of the model for this feature.
            start_logits = all_start_logits[feature_index]
            end_logits = all_end_logits[feature_index]
            # This is what will allow us to map some the positions in our logits to span of texts in the original
            # context.
            offset_mapping = features[feature_index]["offset_mapping"]

            # Go through all possibilities for the `n_best_size` greater start and end logits.
            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()
            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()
            for start_index in start_indexes:
                for end_index in end_indexes:
                    # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond
                    # to part of the input_ids that are not in the context.
                    if (
                        start_index >= len(offset_mapping)
                        or end_index >= len(offset_mapping)
                        or offset_mapping[start_index] is None
                        or offset_mapping[end_index] is None
                    ):
                        continue
                    # Don't consider answers with a length that is either < 0 or > max_answer_length.
                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:
                        continue

                    start_char = offset_mapping[start_index][0]
                    end_char = offset_mapping[end_index][1]
                    valid_answers.append(
                        {
                            "score": start_logits[start_index] + end_logits[end_index],
                            "text": context[start_char: end_char]
                        }
                    )

        if len(valid_answers) > 0:
            best_answer = sorted(valid_answers, key=lambda x: x["score"], reverse=True)[0]
        else:
            # In the very rare edge case we have not a single non-null prediction, we create a fake prediction to avoid
            # failure.
            best_answer = {"text": "", "score": 0.0}

        # Let's pick our final answer: the best one
        predictions[example["id"]] = best_answer["text"]

    return predictions

final_predictions = postprocess_qa_predictions(squad["validation"], squad_eval, raw_predictions.predictions)

metric = load_metric("squad")

formatted_predictions = [{"id": k, "prediction_text": v} for k, v in final_predictions.items()]
references = [{"id": ex["id"], "answers": ex["answers"]} for ex in squad["validation"]]
metric.compute(predictions=formatted_predictions, references=references)

from transformers import AutoModelForQuestionAnswering, AutoTokenizer, TrainingArguments, Trainer, DefaultDataCollator

model_name = "salti/bert-base-multilingual-cased-finetuned-squad"
model = AutoModelForQuestionAnswering.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)
data_collator = DefaultDataCollator()

batch_size = 16
training_args = TrainingArguments(
    output_dir="bert-base-multilingual-cased-finetuned-squad",
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=batch_size,
    per_device_eval_batch_size=batch_size,
    num_train_epochs=3,
    weight_decay=0.01,
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=None,
    eval_dataset=None,
    tokenizer=tokenizer,
    data_collator=data_collator,
)

from collections import defaultdict

mlqa_prep = defaultdict(dict)

def map_datasets(langs, split, prepare_features):
    for lang in langs:
        mlqa_prep[lang][split] = mlqa[lang][split].map(prepare_features, batched=True,
                                    remove_columns=mlqa[lang][split].column_names)

split = "test"
map_datasets(langs_test, split, prepare_validation_features)

def compute_results(langs, split):
    results = {}
    for lang in langs:
        # We can grab the predictions for all features by using the method
        raw_predictions = trainer.predict(mlqa_prep[lang][split])

        # example_id and offset_mapping which we will need for our post-processing
        mlqa_prep[lang][split].set_format(type=mlqa_prep[lang][split].format["type"],
                        columns=list(mlqa_prep[lang][split].features.keys()))

        # And we can apply our post-processing function to our raw predictions
        final_predictions = postprocess_qa_predictions(mlqa[lang][split], mlqa_prep[lang][split], raw_predictions.predictions)

        # We just need to format predictions and labels a bit as it expects a list of dictionaries and not one big dictionary.
        formatted_predictions = [{"id": k, "prediction_text": v} for k, v in final_predictions.items()]
        references = [{"id": ex["id"], "answers": ex["answers"]} for ex in mlqa[lang][split]]
        results[lang] = metric.compute(predictions=formatted_predictions, references=references)
    return results

results_zero_shot_mbert = compute_results(langs_test, split)
print(results_zero_shot_mbert)

import pandas as pd
def results_df(results_dict, model):
    F1colname = "F1_"
    EMcolname = "EM_"
    dict_results = defaultdict(list)
    for lang, scores in results_dict.items():
        dict_results["lang"].append(lang)
        dict_results[F1colname].append(scores['f1'])
        dict_results[EMcolname].append(scores['exact_match'])

    avg_f1 = np.average(dict_results[F1colname])
    avg_em = np.average(dict_results[EMcolname])
    dict_results["lang"].append('avg')
    dict_results[F1colname].append(avg_f1)
    dict_results[EMcolname].append(avg_em)
    df_results = pd.DataFrame(dict_results).round(2)
    return df_results

!mkdir results/mlqa

my_dict_lang = {}
my_dict_lang["ar.ar"]=36.80

df_results_zero_shot_mbert = results_df(results_zero_shot_mbert, "Zero-shot mBERT")
# df_results_zero_shot_mbert.to_csv("results/mlqa/results_zero_shot_mbert.csv")
df_results_zero_shot_mbert

from transformers import AutoModelForQuestionAnswering, AutoTokenizer, TrainingArguments, Trainer, DefaultDataCollator

model_name = "vanichandna/xlm-roberta-finetuned-squad"
model = AutoModelForQuestionAnswering.from_pretrained(model_name,from_tf=True)
tokenizer = AutoTokenizer.from_pretrained(model_name)
data_collator = DefaultDataCollator()

batch_size = 16
training_args = TrainingArguments(
    output_dir="xlm-roberta-finetuned-squad",
    evaluation_strategy="epoch",
    learning_rate=1e-5,
    per_device_train_batch_size=batch_size,
    per_device_eval_batch_size=batch_size,
    num_train_epochs=4,
    weight_decay=0.01,
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=None,
    eval_dataset=None,
    tokenizer=tokenizer,
    data_collator=data_collator,
)

split = "test"
map_datasets(langs_test, split, prepare_validation_features)

results_zero_shot_xlm_r = compute_results(langs_test, split)
print(results_zero_shot_xlm_r)

df_results_zero_shot_xlm_r = results_df(results_zero_shot_xlm_r, "Zero-shot XML-R")
# df_results_zero_shot_xlm_r.to_csv("results/mlqa/results_zero_shot_xlm_r.csv")
df_results_zero_shot_xlm_r

from transformers import AutoModelForQuestionAnswering, AutoTokenizer, TrainingArguments, Trainer, DefaultDataCollator
from transformers import TrainingArguments, Trainer

model_name = "Palak/xlm-roberta-large_squad"
model = AutoModelForQuestionAnswering.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)
data_collator = DefaultDataCollator()

batch_size = 16
training_args = TrainingArguments(
    output_dir="xlm-roberta-large_squad",
    evaluation_strategy="epoch",
    learning_rate=1e-5,
    per_device_train_batch_size=batch_size,
    per_device_eval_batch_size=batch_size,
    num_train_epochs=3,
    weight_decay=0.01,
)

# Add dropout regularization
dropout_prob = 0.1
model.config.attention_probs_dropout_prob = dropout_prob
model.config.hidden_dropout_prob = dropout_prob

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=None,
    eval_dataset=None,
    tokenizer=tokenizer,
    data_collator=data_collator,
)

split = "test"
map_datasets(langs_test, split, prepare_validation_features)

results_zero_shot_xlm_r_large = compute_results(langs_test, split)
print(results_zero_shot_xlm_r_large)

df_results_zero_shot_xlm_r_large = results_df(results_zero_shot_xlm_r_large, "Zero-shot XML-R Large")

df_results_zero_shot_xlm_r_large

def error_analysis(lang_results, lang):
    questions = []
    predicted_answers = []
    correct_answers = []
    true_positives = 0
    false_positives = 0
    true_negatives = 0
    false_negatives = 0

    # Iterate through each example in the MLQA test set for the specified language
    for example in mlqa[lang]["test"]:
        question = example["question"]
        correct_answer = example["answers"]["text"][0]  # Assuming only one correct answer

        # Retrieve predicted answer from the results
        predicted_answer = lang_results[example["id"]]

        # Append question, predicted answer, and correct answer
        questions.append(question)
        predicted_answers.append(predicted_answer)
        correct_answers.append(correct_answer)

        # Categorize based on whether the predicted answer matches the correct answer
        if predicted_answer == correct_answer:
            true_positives += 1
        elif predicted_answer != "" and predicted_answer != correct_answer:
            false_positives += 1
        elif predicted_answer == "" and predicted_answer != correct_answer:
            false_negatives += 1
        else:
            true_negatives += 1

    # Display error analysis results
    print("Error Analysis for", lang)
    print("===================================")
    print("Total questions:", len(questions))
    print("-----------------------------------")
    print("True Positives:", true_positives)
    print("False Positives:", false_positives)
    print("True Negatives:", true_negatives)
    print("False Negatives:", false_negatives)
    print("-----------------------------------")
    print("Example questions, predicted answers, and correct answers:")
    for q, pa, ca in zip(questions, predicted_answers, correct_answers):
        print("Question:", q)
        print("Predicted Answer:", pa)
        print("Correct Answer:", ca)
        print("-----------------------------------")

# Perform error analysis for XLM-R model
error_analysis(final_predictions, "en")

from transformers import AutoModelForQuestionAnswering, AutoTokenizer, TrainingArguments, Trainer, DefaultDataCollator
from transformers import TrainingArguments, Trainer
from datasets import load_dataset, load_metric, DatasetDict
from collections import defaultdict
import numpy as np
from tqdm.auto import tqdm
import collections

# Define the function for postprocessing QA predictions
def postprocess_qa_predictions(examples, features, raw_predictions, n_best_size=20, max_answer_length=30):
    all_start_logits, all_end_logits = raw_predictions
    example_id_to_index = {k: i for i, k in enumerate(examples["id"])}
    features_per_example = collections.defaultdict(list)
    for i, feature in enumerate(features):
        features_per_example[example_id_to_index[feature["example_id"]]].append(i)

    predictions = collections.OrderedDict()

    for example_index, example in enumerate(tqdm(examples)):
        feature_indices = features_per_example[example_index]
        valid_answers = []
        context = example["context"]

        for feature_index in feature_indices:
            start_logits = all_start_logits[feature_index]
            end_logits = all_end_logits[feature_index]
            offset_mapping = features[feature_index]["offset_mapping"]

            start_indexes = np.argsort(start_logits)[-1: -n_best_size - 1: -1].tolist()
            end_indexes = np.argsort(end_logits)[-1: -n_best_size - 1: -1].tolist()

            for start_index in start_indexes:
                for end_index in end_indexes:
                    if (
                        start_index >= len(offset_mapping)
                        or end_index >= len(offset_mapping)
                        or offset_mapping[start_index] is None
                        or offset_mapping[end_index] is None
                    ):
                        continue
                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:
                        continue

                    start_char = offset_mapping[start_index][0]
                    end_char = offset_mapping[end_index][1]
                    valid_answers.append(
                        {
                            "score": start_logits[start_index] + end_logits[end_index],
                            "text": context[start_char: end_char]
                        }
                    )

        if len(valid_answers) > 0:
            best_answer = sorted(valid_answers, key=lambda x: x["score"], reverse=True)[0]
        else:
            best_answer = {"text": "", "score": 0.0}

        predictions[example["id"]] = best_answer["text"]

    return predictions

# Define the error analysis function
def error_analysis(lang_results, lang):
    questions = []
    predicted_answers = []
    correct_answers = []
    true_positives = 0
    false_positives = 0
    true_negatives = 0
    false_negatives = 0

    for example in mlqa[lang]["test"]:
        question = example["question"]
        correct_answer = example["answers"]["text"][0]

        predicted_answer = lang_results[example["id"]]

        questions.append(question)
        predicted_answers.append(predicted_answer)
        correct_answers.append(correct_answer)

        if predicted_answer == correct_answer:
            true_positives += 1
        elif predicted_answer != "" and predicted_answer != correct_answer:
            false_positives += 1
        elif predicted_answer == "" and predicted_answer != correct_answer:
            false_negatives += 1
        else:
            true_negatives += 1

    print("Error Analysis for", lang)
    print("===================================")
    print("Total questions:", len(questions))
    print("-----------------------------------")
    print("True Positives:", true_positives)
    print("False Positives:", false_positives)
    print("True Negatives:", true_negatives)
    print("False Negatives:", false_negatives)
    print("-----------------------------------")
    print("Example questions, predicted answers, and correct answers:")
    for q, pa, ca in zip(questions, predicted_answers, correct_answers):
        print("Question:", q)
        print("Predicted Answer:", pa)
        print("Correct Answer:", ca)
        print("-----------------------------------")

# # Load the MLQA dataset
# mlqa = {}
# for lang1 in langs:
#     for lang2 in langs:
#         mlqa_key = f"{lang1}.{lang2}"
#         mlqa[mlqa_key] = load_dataset("mlqa", f"mlqa.{lang1}.{lang2}")

# Define the tokenization and preparation functions
model_name = "vanichandna/xlm-roberta-finetuned-squad"  # You can change the model here
tokenizer = AutoTokenizer.from_pretrained(model_name)
max_length = 384
doc_stride = 128

def prepare_validation_features(examples):
    examples["question"] = [q.lstrip() for q in examples["question"]]
    tokenized_examples = tokenizer(
        examples["question"],
        examples["context"],
        truncation="only_second",
        max_length=max_length,
        stride=doc_stride,
        return_overflowing_tokens=True,
        return_offsets_mapping=True,
        padding="max_length",
    )

    sample_mapping = tokenized_examples.pop("overflow_to_sample_mapping")
    tokenized_examples["example_id"] = examples["id"]

    for i in range(len(tokenized_examples["input_ids"])):
        sequence_ids = tokenized_examples.sequence_ids(i)
        context_index = 1
        sample_index = sample_mapping[i]
        tokenized_examples["example_id"].append(examples["id"][sample_index])

        tokenized_examples["offset_mapping"][i] = [
            (o if sequence_ids[k] == context_index else None)
            for k, o in enumerate(tokenized_examples["offset_mapping"][i])
        ]

    return tokenized_examples

# Load the XLM-R model and perform predictions for each language
final_predictions = {}
for lang in langs_test:
  raw_predictions = trainer.predict(mlqa[lang]["test"].map(prepare_validation_features, batched=True, remove_columns=mlqa[lang]["test"].column_names, load_from_cache_file=False))
mlqa[lang]["test"].set_format(type=mlqa[lang]["test"].format["type"], columns=["id", "answers"])
final_predictions[lang] = postprocess_qa_predictions(mlqa[lang]["test"], mlqa[lang]["test"], raw_predictions.predictions)

# Perform error analysis for each language
for lang in langs:
    error_analysis(final_predictions[lang], lang)